.. _tutorial:

Tutorial
========

``kneejerk`` is a library that accomplishes labeling/using your image data in two steps:

1. Rapid scoring of your images via the Command Line Interface
2. Using the file generated by (1) to load all of your images into a ``numpy.array``.

Let's go through these now.

Example Project
----------------

Suppose you've got a simple directory called ``scratch`` that contains the following images, tucked away in a subdirectory called ``images``

.. image:: _static/bug_fixing.jpg
    :width: 400px

.. image:: _static/deep_learning.jpg
    :width: 400px

.. image:: _static/version_control.png
    :width: 400px

At this point our project structure looks like

.. code:: none
    
    scratch
     |
     |--- images
            |
            |--- bug_fixing.jpg
            |--- deep_learning.jpg
            |---- version_control.png


Labeling
----------

Now we want to actually label our data.

To do this, we'll leverage the ``kneejerk`` CLI that you got for free as a result of ``pip`` installing the library.

Doing this is as simple as typing ``kneejerk`` and then populating the following options:


- ``-i``, the location of the directory containing your images, defaulted to wherever you called ``kneejerk`` from
- ``-f``, the name of the resulting ``.csv``, defaulted to ``output.csv``
- ``-o``, the directory to dump the ``.csv`` from the last step. Also defaulted to wherever you called the tool
- ``-s``, shuffles the order that images are served up, defaulted to ``True``


On Our Data
~~~~~~~~~~~~

So in our case, if we wanted to launch the tool from the root diectory of ``scratch``, aimed at our images, and dropping a resulting ``.csv`` at the root of the project, we'd use the following:

.. code:: none
    
    $ kneejerk -i images -o . -f example.csv -s True


Which will immediately launch a ``matplotlib`` interface that waits for your keyed value for the image.

.. image:: _static/cli_1.PNG
    :width: 600

Pressing your value will immediately log your score, close the current image, and open the next. This repeats until you've gone through the whole input directory.

When this is finished, your project structure will now look like

.. code:: none
    
    scratch
     |
     |--- images
            |
            |--- bug_fixing.jpg
            |--- deep_learning.jpg
            |---- version_control.png
     |--- example.csv


Inspecting, we'll see that the output file is of the form ``(filepath, score)``, like so (omitting my full firepath):

.. code:: none

    $ cat example.csv
    scratch\images\bug_fixing.jpg,1
    scratch\images\version_control.png,0
    scratch\images\deep_learning.jpg,1


Loading
-------

In order to make our image data useful for any Machine Learning routine we want to build, we'll need to convert our images to numeric, matrix representations. The ``kneejerk.data.loader`` module handles this neatly.


Generic Data Loading File
~~~~~~~~~~~~~~~~~~~~~~~~~

The following file, ``foo.py``, saved and executed from the root directory of your project is all you need to get all of your data loading out of the way and let you get to the fun stuff. Everything after line 3 is merely included for this tutorial.

.. code:: python
    :linenos:

    from kneejerk.data.loader import load_normalized_image_data

    X, y = load_normalized_image_data('example.csv')


    print('Shape of image matrix:', X.shape)
    print('Shape of score matrix:', y.shape)

    print('RGB values of the top-left 5x5 of the first image')
    print(X[0, :5, :5])


Running this yields

.. code:: none

    $ python foo.py
    Max height: 1587
    Max width : 1587
    Shape of image matrix: (3, 200, 200, 3)
    Shape of score matrix: (3,)
    RGB values of the top-left 5x5 of the first image
    [[[215 215 215]
      [210 210 210]
      [207 207 207]
      [207 207 207]
      [209 209 209]]

     [[217 217 217]
      [212 212 212]
      [209 209 209]
      [207 207 207]
      [209 209 209]]

     [[219 219 219]
      [213 213 213]
      [210 210 210]
      [207 207 207]
      [209 209 209]]

     [[219 219 219]
      [213 213 213]
      [210 210 210]
      [208 208 208]
      [208 208 208]]

     [[221 221 221]
      [215 215 215]
      [211 211 211]
      [210 210 210]
      [210 210 210]]]

